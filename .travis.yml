language: rust
cache: cargo

env:
  global:
    # This will be part of the release tarball
    # TODO change the project name
    - PROJECT_NAME=qwk
    # TODO comment out this variable if you don't want to build .deb packages on all the targets.
    # - MAKE_DEB=yes
    # TODO update these two variables. They are part of the .deb package metadata
    # - DEB_MAINTAINER="Jorge Aparicio <japaricious@gmail.com>"
    # - DEB_DESCRIPTION="Hello, world! written in Rust"

# AFAICT There are a few ways to set up the build jobs. This one is not the DRYest but I feel is the
# easiest to reason about.
# TODO Feel free to remove the channels/targets you don't need
# NOTE Make *sure* you don't remove a reference (&foo) if you are going to dereference it (*foo)
matrix:
  include:
    # Stable channel
    - os: linux
      rust: stable
      env: TARGET=aarch64-unknown-linux-gnu
      # need Trusty because the glibc in Precise is too old and doesn't support 64-bit arm
      dist: trusty
      sudo: required
      # Extra packages only for this job
      addons:
        apt:
          packages: &aarch64_unknown_linux_gnu
            # Transparent emulation
            - qemu-user-static
            - binfmt-support
    - os: linux
      rust: stable
      env: TARGET=armv7-unknown-linux-gnueabihf
      # sudo is needed for binfmt_misc, which is needed for transparent user qemu emulation
      sudo: required
      addons:
        apt:
          packages: &armv7_unknown_linux_gnueabihf
            # Cross compiler and cross compiled C libraries
            - gcc-arm-linux-gnueabihf
            - libc6-armhf-cross
            - libc6-dev-armhf-cross
            # Transparent emulation
            - qemu-user-static
            - binfmt-support
    - os: osx
      rust: stable
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: &i686_unknown_linux_gnu
            # Cross compiler and cross compiled C libraries
            - gcc-multilib
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-musl
    - os: osx
      rust: stable
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-musl
    # Beta channel
    - os: linux
      rust: beta
      env: TARGET=aarch64-unknown-linux-gnu
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *aarch64_unknown_linux_gnu
    - os: linux
      rust: beta
      env: TARGET=armv7-unknown-linux-gnueabihf
      sudo: required
      addons:
        apt:
          # Use the same packages the stable version uses
          packages: *armv7_unknown_linux_gnueabihf
    - os: osx
      rust: beta
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: *i686_unknown_linux_gnu
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-musl
    - os: osx
      rust: beta
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: beta
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: beta
      env: TARGET=x86_64-unknown-linux-musl
    # Nightly channel
    - os: linux
      rust: nightly
      env: TARGET=aarch64-unknown-linux-gnu
      dist: trusty
      sudo: required
      addons:
        apt:
          packages: *aarch64_unknown_linux_gnu
    - os: linux
      rust: nightly
      env: TARGET=armv7-unknown-linux-gnueabihf
      sudo: required
      addons:
        apt:
          # Use the same packages the stable version uses
          packages: *armv7_unknown_linux_gnueabihf
    - os: osx
      rust: nightly
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages: *i686_unknown_linux_gnu
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-musl
    - os: osx
      rust: nightly
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-musl
  allow_failures:
    # TODO You might need to allow failures for some target on some channel for some reason. Below
    # there's one (commented out) example of how to do that. Just change the OS, channel and TARGET
    # as needed.
    # - os: linux
    #   rust: stable
    #   env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-musl
    - os: linux
      rust: stable
      env: TARGET=x86_64-unknown-linux-musl

before_install:
  - export PATH="$PATH:$HOME/.cargo/bin"

install:
  - bash ci/install.sh

script:
  - bash ci/script.sh

before_deploy:
  - bash ci/before_deploy.sh

deploy:
  provider: releases
  # TODO Regenerate this api_key for your project, this one won't work for you. Here's how:
  # - Go to 'https://github.com/settings/tokens/new' and generate a Token with only the
  # `public_repo` scope enabled
  # - Call `travis encrypt $github_token` where $github_token is the token you got in the previous
  # step and `travis` is the official Travis CI gem (see https://rubygems.org/gems/travis/)
  # - Enter the "encrypted value" below
  api_key:
    secure: "fNd8e2j634Oxpt45K4vo7duEQF5I0I5zx9DmrBg9s2l6qvgDg4oMkwUxJCAm10kVpBV0o5cvUF0mfTLdmcwg+sYc1xrKJjLlcvpQbDl0syXkJmrv3C6YvUR+ntgfw6qNJqrEa6Aqw+kdbFZPPyQX/acd35gK14IZw1EoVLQSQcYV49o
dkjq/AtQbc2U+cpv48ItGQrCkT7sPecPDZOCa2Rk1ZvoqzmQc02A9kqYLTf8tC8UjEIHKXJJdW+//sfLHWyBQQHrSOCoa38breINUmf0Fo+O6Z8jWaBG/x0kpiqao90NPSEekY+xYaoCTugPjFm6TVqZPzhxILUuzkqn4TN79nk8zNuvOEGxXm+UBg
9Em6ZLC9vQkpKXbDWklSjubl4ryNHVeJ8WdWYGoGNdh2xvo4jwQQvEfBc9uPcS2itEP7/NjtRxXzlEqrK0/W7uM+m1cLrf7IQj6A/hcjtxMCSULkxlNRGrwl0u3xO2S3nKLndVHA1f+lYpCwrlue6fgdgG5104rDpRAiyduu+VHWAjr/YnecYUTY2S

b594vZ8FXaowo3BcZqTJaEVIYSrA2b7M7MiT4yi8+8ZtoyIZdgsYaQR6unfRiy6ssrFZR2DhtxfMa1dIIq4wJPIpojehg8sxGrqIqvfHCVsQCR+VuvkaUStNgN2dMKhEFK4DMv2E="
  file_glob: true
  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.*
  # don't delete the artifacts from previous phases
  skip_cleanup: true
  # deploy when a new tag is pushed
  on:
    # channel to use to produce the release artifacts
    # NOTE make sure you only release *once* per target
    # TODO you may want to pick a different channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true

branches:
  only:
    # Pushes and PR to the master branch
    - master
    # IMPORTANT Ruby regex to match tags. Required, or travis won't trigger deploys when a new tag
    # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22
    - /^v\d+\.\d+\.\d+.*$/

notifications:
  email:
    on_success: never
